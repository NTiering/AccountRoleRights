@model AccountViewModel
@{ 
	var isReadOnly = ViewBag.Readonly ;
    var cssClass = isReadOnly ? " readonly form-control " : " form-control ";
	var buttonsFlag = ViewBag.ButtonFlag ?? "";

    var showRelationships = buttonsFlag.Contains("R");
    var showSubmitButton = buttonsFlag.Contains("S");
}
<script>  
    $(function () {
        radio("app-startup").broadcast(false);
    })
</script>

@if(showRelationships)
{
	<p>	
		<!-- show a list of Role objects in a popup for AccountRole -->
        <a class="btn btn-info btn-sm disableOnAjax" onclick="radio('Account-AccountRole').broadcast(@Model.Id)"><i class="icon-role"></i> Account Role</a>
		</p>	
}

<form method="post" enctype="multipart/form-data">
	<input type="hidden" id="_post" name="_post" value="1"/>
	@Html.Partial("Errors")
   

    <div class="row">
			<div class="col-md-6">
				<!-- ===========================================
						Input for Username (string)
				=========================================== -->
				<label for="Username">Username</label>
				
				<small class="text-info">
                Unique user Id
				
				@if (ViewData.ModelState["Username"] != null)
                {
                    <span class="text-danger">
                        @Html.ValidationMessageFor(x => x.Username)
                    </span>
                }            </small>				
				
				@Html.TextBoxFor(x=>x.Username, new { @class= cssClass + " data-string type-string", name="Username" })
								
			</div>
			<div class="col-md-6">
				<!-- ===========================================
						Input for Password (hashed)
				=========================================== -->
				<label for="Password">Password</label>
				
				<small class="text-info">
                One way encrypted password
				
				@if (ViewData.ModelState["Password"] != null)
                {
                    <span class="text-danger">
                        @Html.ValidationMessageFor(x => x.Password)
                    </span>
                }            </small>				

				<div class="row">
					<div class="col-md-8">
						@Html.PasswordFor(x => x.Password, new { @class = cssClass + " hashed-input data-string type-hashed", name = "Password", @readonly = "readonly" , value = Model.Password })
					</div>
					<div class="col-md-2">
					@if (isReadOnly == false)
                    {
                    	<span class="btn btn-info" onclick="radio('password-fill').broadcast({name : 'Password' , onSave : function(n){$('#Password').val(n)}})"><i class="fa fa-key"></i></span>
					}
					</div>
				</div>
				
			</div>
			<div class="col-md-6">
				<!-- ===========================================
						Input for LastLoggedIn (datetime)
				=========================================== -->
				<label for="LastLoggedIn">Last Logged In</label>
				
				<small class="text-info">
                Last time someone successfully logged in with this account
				
				@if (ViewData.ModelState["LastLoggedIn"] != null)
                {
                    <span class="text-danger">
                        @Html.ValidationMessageFor(x => x.LastLoggedIn)
                    </span>
                }            </small>				
				
				@Html.TextBoxFor(x=>x.LastLoggedIn,"{0:d MMM yyyy}", new { @class= cssClass + " data-DateTime type-datetime", name="LastLoggedIn" })
								
			</div>
			<div class="col-md-6">
				<!-- ===========================================
						Input for LoginAttempts (int)
				=========================================== -->
				<label for="LoginAttempts">Login Attempts</label>
				
				<small class="text-info">
                Count of unsuccessful login attempts against this account
				
				@if (ViewData.ModelState["LoginAttempts"] != null)
                {
                    <span class="text-danger">
                        @Html.ValidationMessageFor(x => x.LoginAttempts)
                    </span>
                }            </small>				
				
				@Html.TextBoxFor(x=>x.LoginAttempts, new { @class= cssClass + " data-int type-int", name="LoginAttempts" })
								
			</div>
			<div class="col-md-6">
				<!-- ===========================================
						Input for IsLockedOut (bool)
				=========================================== -->
				<label for="IsLockedOut">Is Locked Out</label>
				
				<small class="text-info">
                If true this account cannot be used until unlocked
				
				@if (ViewData.ModelState["IsLockedOut"] != null)
                {
                    <span class="text-danger">
                        @Html.ValidationMessageFor(x => x.IsLockedOut)
                    </span>
                }            </small>				

				@Html.DropDownListFor(x=>x.IsLockedOut, ViewBag.BoolSelectItems as SelectListItem[], new { @class= cssClass + " data-bool type-bool" ,name="IsLockedOut", makeDisabled = isReadOnly ? "true" : "false"})
							</div>
			<div class="col-md-6">
				<!-- ===========================================
						Input for AccountValidFrom (datetime)
				=========================================== -->
				<label for="AccountValidFrom">Account Valid From</label>
				
				<small class="text-info">
                The date the account can be used from
				
				@if (ViewData.ModelState["AccountValidFrom"] != null)
                {
                    <span class="text-danger">
                        @Html.ValidationMessageFor(x => x.AccountValidFrom)
                    </span>
                }            </small>				
				
				@Html.TextBoxFor(x=>x.AccountValidFrom,"{0:d MMM yyyy}", new { @class= cssClass + " data-DateTime type-datetime", name="AccountValidFrom" })
								
			</div>
			<div class="col-md-6">
				<!-- ===========================================
						Input for AccountValidTo (datetime)
				=========================================== -->
				<label for="AccountValidTo">Account Valid To</label>
				
				<small class="text-info">
                The date the account can be used to
				
				@if (ViewData.ModelState["AccountValidTo"] != null)
                {
                    <span class="text-danger">
                        @Html.ValidationMessageFor(x => x.AccountValidTo)
                    </span>
                }            </small>				
				
				@Html.TextBoxFor(x=>x.AccountValidTo,"{0:d MMM yyyy}", new { @class= cssClass + " data-DateTime type-datetime", name="AccountValidTo" })
								
			</div>
			<div class="col-md-6">
				<!-- ===========================================
						Input for LoginStartAt (time)
				=========================================== -->
				<label for="LoginStartAt">Login Start At</label>
				
				<small class="text-info">
                The earliest time login can be validated
				
				@if (ViewData.ModelState["LoginStartAt"] != null)
                {
                    <span class="text-danger">
                        @Html.ValidationMessageFor(x => x.LoginStartAt)
                    </span>
                }            </small>				
				
				@Html.DropDownListFor(x=>x.LoginStartAt,ViewBag.TimeSelectItems as SelectListItem[] , new { @class= cssClass + " data-string type-time", name="LoginStartAt", makeDisabled = isReadOnly ? "true" : "false" })
								
			</div>
			<div class="col-md-6">
				<!-- ===========================================
						Input for LoginUntil (time)
				=========================================== -->
				<label for="LoginUntil">Login Until</label>
				
				<small class="text-info">
                The latest time login can be validated
				
				@if (ViewData.ModelState["LoginUntil"] != null)
                {
                    <span class="text-danger">
                        @Html.ValidationMessageFor(x => x.LoginUntil)
                    </span>
                }            </small>				
				
				@Html.DropDownListFor(x=>x.LoginUntil,ViewBag.TimeSelectItems as SelectListItem[] , new { @class= cssClass + " data-string type-time", name="LoginUntil", makeDisabled = isReadOnly ? "true" : "false" })
								
			</div>
	
	
	</div>
	
    @if (showSubmitButton)
    {
        <span>
            <hr />
            <input type="submit" class="btn btn-info " value="Submit" />
        </span>
    }

</form>